<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mr Frank OFC | CDN</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary: #2563eb;
            --primary-dark: #1d4ed8;
            --text: #1f2937;
            --text-light: #6b7280;
            --bg: #f9fafb;
            --card-bg: #ffffff;
            --border: #e5e7eb;
            --success: #10b981;
            --error: #ef4444;
            --warning: #f59e0b;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', system-ui, -apple-system, sans-serif;
        }

        body {
            background-color: var(--bg);
            color: var(--text);
            line-height: 1.6;
            padding: 0;
            margin: 0;
        }

        .app-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem 1rem;
        }

        .app-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid var(--border);
        }

        .app-header h1 {
            font-size: 1.8rem;
            font-weight: 600;
            color: var(--primary);
        }

        .app-header h1 i {
            margin-right: 0.5rem;
        }

        .api-status {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.9rem;
        }

        .status-dot {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            background-color: var(--text-light);
        }

        .status-dot.connected {
            background-color: var(--success);
        }

        .status-dot.error {
            background-color: var(--error);
        }

        .upload-section {
            background-color: var(--card-bg);
            border-radius: 0.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            padding: 2rem;
            margin-bottom: 2rem;
        }

        .config-panel {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 1.5rem;
        }

        .form-group {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .form-group label {
            font-size: 0.9rem;
            font-weight: 500;
            color: var(--text);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .form-group input,
        .form-group select {
            padding: 0.75rem;
            border: 1px solid var(--border);
            border-radius: 0.375rem;
            font-size: 1rem;
            transition: border-color 0.2s;
        }

        .form-group input:focus,
        .form-group select:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
        }

        .drop-area {
            border: 2px dashed var(--border);
            border-radius: 0.5rem;
            padding: 3rem 2rem;
            text-align: center;
            cursor: pointer;
            transition: all 0.2s;
            margin-bottom: 1.5rem;
            position: relative;
        }

        .drop-area:hover {
            border-color: var(--primary);
            background-color: rgba(37, 99, 235, 0.02);
        }

        .drop-area.highlight {
            border-color: var(--primary);
            background-color: rgba(37, 99, 235, 0.05);
        }

        .drop-area p {
            margin-bottom: 1rem;
            color: var(--text-light);
        }

        .drop-area .browse-btn {
            background-color: var(--primary);
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 0.375rem;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .drop-area .browse-btn:hover {
            background-color: var(--primary-dark);
        }

        #fileInput {
            display: none;
        }

        .file-list {
            border: 1px solid var(--border);
            border-radius: 0.5rem;
            overflow: hidden;
        }

        .file-item {
            display: grid;
            grid-template-columns: 1fr auto auto;
            align-items: center;
            padding: 1rem;
            border-bottom: 1px solid var(--border);
            gap: 1rem;
        }

        .file-item:last-child {
            border-bottom: none;
        }

        .file-info {
            display: flex;
            align-items: center;
            gap: 1rem;
            overflow: hidden;
        }

        .file-icon {
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--primary);
            flex-shrink: 0;
        }

        .file-name {
            font-weight: 500;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .file-size {
            font-size: 0.8rem;
            color: var(--text-light);
        }

        .file-status {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.9rem;
        }

        .file-status.uploading {
            color: var(--warning);
        }

        .file-status.success {
            color: var(--success);
        }

        .file-status.error {
            color: var(--error);
        }

        .progress-container {
            grid-column: 1 / -1;
            margin-top: 0.5rem;
        }

        .progress-bar {
            height: 6px;
            background-color: var(--border);
            border-radius: 3px;
            overflow: hidden;
        }

        .progress {
            height: 100%;
            background-color: var(--primary);
            width: 0%;
            transition: width 0.3s ease;
        }

        .action-btn {
            background: none;
            border: none;
            color: var(--primary);
            cursor: pointer;
            padding: 0.5rem;
            border-radius: 0.25rem;
            transition: background-color 0.2s;
        }

        .action-btn:hover {
            background-color: rgba(37, 99, 235, 0.1);
        }

        .cdn-url {
            grid-column: 1 / -1;
            margin-top: 0.5rem;
            font-size: 0.9rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            background-color: var(--bg);
            padding: 0.75rem;
            border-radius: 0.375rem;
            word-break: break-all;
        }

        .cdn-url a {
            color: var(--primary);
            text-decoration: none;
        }

        .cdn-url a:hover {
            text-decoration: underline;
        }

        .copy-btn {
            margin-left: auto;
            background-color: var(--primary);
            color: white;
            border: none;
            padding: 0.25rem 0.75rem;
            border-radius: 0.25rem;
            font-size: 0.8rem;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .copy-btn:hover {
            background-color: var(--primary-dark);
        }

        .empty-state {
            text-align: center;
            padding: 2rem;
            color: var(--text-light);
        }

        @media (max-width: 768px) {
            .app-container {
                padding: 1rem;
            }

            .app-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }

            .file-item {
                grid-template-columns: 1fr auto;
            }

            .file-status {
                grid-column: 2;
                grid-row: 1;
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <header class="app-header">
            <h1><i class="fas fa-cloud-upload-alt"></i> Mr Frank OFC | CDN Manager</h1>
            <div class="api-status" id="apiStatus">
                <span class="status-dot"></span>
                <span>API: Checking...</span>
            </div>
        </header>

        <main class="main-content">
            <div class="upload-section">
                <div class="config-panel">
                    <div class="form-group">
                        <label for="storagePath"><i class="fas fa-folder"></i> Storage Path</label>
                        <input type="text" id="storagePath" value="media/" placeholder="e.g., media/images or assets/css">
                    </div>
                    <div class="form-group">
                        <label for="fileType"><i class="fas fa-filter"></i> File Type</label>
                        <select id="fileType">
                            <option value="all">All File Types</option>
                            <option value="image">Images Only</option>
                            <option value="script">JavaScript</option>
                            <option value="style">CSS</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="customName"><i class="fas fa-tag"></i> Custom Filename</label>
                        <input type="text" id="customName" placeholder="Leave blank to keep original name">
                    </div>
                </div>

                <div id="dropArea" class="drop-area">
                    <p><i class="fas fa-cloud-upload-alt fa-2x"></i></p>
                    <p>Drag & drop files here or</p>
                    <button class="browse-btn">Browse Files</button>
                    <input type="file" id="fileInput" multiple>
                </div>

                <div class="file-list" id="fileList">
                    <div class="empty-state" id="emptyState">
                        <p>No files uploaded yet</p>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // DOM Elements
            const dropArea = document.getElementById('dropArea');
            const fileInput = document.getElementById('fileInput');
            const browseBtn = dropArea.querySelector('.browse-btn');
            const fileList = document.getElementById('fileList');
            const emptyState = document.getElementById('emptyState');
            const storagePath = document.getElementById('storagePath');
            const fileType = document.getElementById('fileType');
            const customName = document.getElementById('customName');
            const apiStatus = document.getElementById('apiStatus');
            const statusDot = apiStatus.querySelector('.status-dot');

            // File type validation patterns
            const fileTypePatterns = {
                image: /\.(jpg|jpeg|png|gif|webp|svg|bmp)$/i,
                script: /\.(js)$/i,
                style: /\.(css)$/i
            };

            // Check API status on load
            checkApiStatus();

            // Event listeners
            browseBtn.addEventListener('click', () => fileInput.click());
            fileInput.addEventListener('change', handleFileSelect);
            dropArea.addEventListener('dragover', handleDragOver);
            dropArea.addEventListener('dragleave', handleDragLeave);
            dropArea.addEventListener('drop', handleDrop);

            // Functions
            function checkApiStatus() {
                fetch('/api/status')
                    .then(response => {
                        if (response.ok) {
                            statusDot.classList.add('connected');
                            apiStatus.querySelector('span:last-child').textContent = 'API: Connected';
                        } else {
                            throw new Error('API not available');
                        }
                    })
                    .catch(error => {
                        statusDot.classList.add('error');
                        apiStatus.querySelector('span:last-child').textContent = 'API: Not Connected';
                        console.error('API connection error:', error);
                    });
            }

            function handleDragOver(e) {
                e.preventDefault();
                e.stopPropagation();
                dropArea.classList.add('highlight');
            }

            function handleDragLeave(e) {
                e.preventDefault();
                e.stopPropagation();
                dropArea.classList.remove('highlight');
            }

            function handleDrop(e) {
                e.preventDefault();
                e.stopPropagation();
                dropArea.classList.remove('highlight');
                
                if (e.dataTransfer.files.length) {
                    handleFiles(e.dataTransfer.files);
                }
            }

            function handleFileSelect(e) {
                if (e.target.files.length) {
                    handleFiles(e.target.files);
                    e.target.value = '';
                }
            }

            function handleFiles(files) {
                const selectedType = fileType.value;
                const validFiles = Array.from(files).filter(file => {
                    if (selectedType === 'all') return true;
                    if (!fileTypePatterns[selectedType]) return false;
                    return fileTypePatterns[selectedType].test(file.name);
                });

                if (validFiles.length === 0) {
                    alert(`No files match the selected type (${fileType.options[fileType.selectedIndex].text})`);
                    return;
                }

                if (emptyState) emptyState.style.display = 'none';
                validFiles.forEach(file => uploadFile(file));
            }

            function uploadFile(file) {
                const fileItem = document.createElement('div');
                fileItem.className = 'file-item';
                fileItem.innerHTML = `
                    <div class="file-info">
                        <div class="file-icon">
                            <i class="${getFileIcon(file.name)}"></i>
                        </div>
                        <div>
                            <div class="file-name">${file.name}</div>
                            <div class="file-size">${formatFileSize(file.size)}</div>
                        </div>
                    </div>
                    <div class="file-status uploading">
                        <i class="fas fa-spinner fa-spin"></i>
                        <span>Uploading</span>
                    </div>
                    <div class="progress-container">
                        <div class="progress-bar">
                            <div class="progress" id="progress-${file.name.replace(/[^a-z0-9]/gi, '_')}"></div>
                        </div>
                    </div>
                `;
                fileList.appendChild(fileItem);

                const progressBar = fileItem.querySelector('.progress');
                const fileStatus = fileItem.querySelector('.file-status');

                const formData = new FormData();
                formData.append('file', file);
                
                // Clean and format storage path
                let pathValue = storagePath.value.trim();
                pathValue = pathValue.replace(/^\/|\/$/g, ''); // Remove leading/trailing slashes
                if (pathValue) pathValue += '/'; // Add trailing slash
                
                formData.append('path', pathValue || 'media/');
                
                if (customName.value.trim()) {
                    formData.append('customName', customName.value.trim());
                }

                const xhr = new XMLHttpRequest();
                xhr.open('POST', '/upload', true);

                // Simulate progress
                let progress = 0;
                const progressInterval = setInterval(() => {
                    progress += Math.random() * 10;
                    if (progress >= 90) clearInterval(progressInterval);
                    progressBar.style.width = `${progress}%`;
                }, 300);

                xhr.onload = function() {
                    clearInterval(progressInterval);
                    progressBar.style.width = '100%';

                    if (xhr.status === 200) {
                        const response = JSON.parse(xhr.responseText);
                        fileStatus.innerHTML = '<i class="fas fa-check-circle"></i> <span>Uploaded</span>';
                        fileStatus.classList.remove('uploading');
                        fileStatus.classList.add('success');

                        // Add CDN URL
                        const cdnUrlContainer = document.createElement('div');
                        cdnUrlContainer.className = 'cdn-url';
                        cdnUrlContainer.innerHTML = `
                            <i class="fas fa-link"></i>
                            <a href="${response.cdnUrl}" target="_blank">${response.cdnUrl}</a>
                            <button class="copy-btn">Copy</button>
                        `;
                        fileItem.appendChild(cdnUrlContainer);

                        // Add copy functionality
                        cdnUrlContainer.querySelector('.copy-btn').addEventListener('click', () => {
                            navigator.clipboard.writeText(response.cdnUrl);
                            const copyBtn = cdnUrlContainer.querySelector('.copy-btn');
                            copyBtn.textContent = 'Copied!';
                            setTimeout(() => {
                                copyBtn.textContent = 'Copy';
                            }, 2000);
                        });
                    } else {
                        handleUploadError(fileItem, fileStatus, xhr);
                    }
                };

                xhr.onerror = function() {
                    clearInterval(progressInterval);
                    handleUploadError(fileItem, fileStatus, xhr);
                };

                xhr.send(formData);
            }

            function handleUploadError(fileItem, fileStatus, xhr) {
                fileStatus.innerHTML = '<i class="fas fa-times-circle"></i> <span>Error</span>';
                fileStatus.classList.remove('uploading');
                fileStatus.classList.add('error');

                let errorMessage = 'Upload failed';
                try {
                    const errorResponse = JSON.parse(xhr.responseText);
                    if (errorResponse.error) {
                        errorMessage = errorResponse.error;
                    }
                } catch (e) {
                    console.error('Error parsing error response:', e);
                }

                const errorContainer = document.createElement('div');
                errorContainer.className = 'cdn-url';
                errorContainer.style.color = 'var(--error)';
                errorContainer.innerHTML = `
                    <i class="fas fa-exclamation-circle"></i>
                    <span>${errorMessage}</span>
                `;
                fileItem.appendChild(errorContainer);
            }

            function getFileIcon(filename) {
                const extension = filename.split('.').pop().toLowerCase();
                const iconMap = {
                    jpg: 'far fa-file-image',
                    jpeg: 'far fa-file-image',
                    png: 'far fa-file-image',
                    gif: 'far fa-file-image',
                    webp: 'far fa-file-image',
                    svg: 'far fa-file-image',
                    bmp: 'far fa-file-image',
                    pdf: 'far fa-file-pdf',
                    doc: 'far fa-file-word',
                    docx: 'far fa-file-word',
                    xls: 'far fa-file-excel',
                    xlsx: 'far fa-file-excel',
                    ppt: 'far fa-file-powerpoint',
                    pptx: 'far fa-file-powerpoint',
                    txt: 'far fa-file-alt',
                    js: 'far fa-file-code',
                    mjs: 'far fa-file-code',
                    cjs: 'far fa-file-code',
                    html: 'far fa-file-code',
                    css: 'far fa-file-code',
                    scss: 'far fa-file-code',
                    less: 'far fa-file-code',
                    json: 'far fa-file-code',
                    xml: 'far fa-file-code',
                    zip: 'far fa-file-archive',
                    rar: 'far fa-file-archive',
                    '7z': 'far fa-file-archive',
                    tar: 'far fa-file-archive',
                    gz: 'far fa-file-archive',
                    mp3: 'far fa-file-audio',
                    wav: 'far fa-file-audio',
                    ogg: 'far fa-file-audio',
                    mp4: 'far fa-file-video',
                    mov: 'far fa-file-video',
                    avi: 'far fa-file-video',
                    webm: 'far fa-file-video',
                    default: 'far fa-file'
                };

                return iconMap[extension] || iconMap.default;
            }

            function formatFileSize(bytes) {
                if (bytes === 0) return '0 Bytes';
                const k = 1024;
                const sizes = ['Bytes', 'KB', 'MB', 'GB'];
                const i = Math.floor(Math.log(bytes) / Math.log(k));
                return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
            }
        });
    </script>
</body>
</html>
